// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Category.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// ignore_for_file:
// BEGIN TABLES
// Category TABLE
class TableCategory extends SqfEntityTableBase {
  TableCategory() {
    // declare properties of EntityTable
    tableName = 'categories';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isNotNull: true),
      SqfEntityFieldBase('parent', DbType.text, isNotNull: true),
      SqfEntityFieldRelationshipBase(
          TableArticle.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'articles',
          isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableCategory();
  }
}

// CategoriesRelation TABLE
class TableCategoriesRelation extends SqfEntityTableBase {
  TableCategoriesRelation() {
    // declare properties of EntityTable
    tableName = 'categoriesRelations';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldRelationshipBase(
          TableCategory.getInstance, DeleteRule.NO_ACTION,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'category',
          isPrimaryKeyField: true,
          isNotNull: false),
      SqfEntityFieldRelationshipBase(
          TableCategory.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'parent',
          isNotNull: false),
      SqfEntityFieldRelationshipBase(
          TableCategory.getInstance, DeleteRule.NO_ACTION,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'children',
          isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableCategoriesRelation();
  }
}

// Article TABLE
class TableArticle extends SqfEntityTableBase {
  TableArticle() {
    // declare properties of EntityTable
    tableName = 'articles';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('articleName', DbType.text, isNotNull: true),
      SqfEntityFieldBase('articleText', DbType.text, isNotNull: true),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableArticle();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class LawsBrowserDB extends SqfEntityModelProvider {
  LawsBrowserDB() {
    databaseName = lawsBrowserDbModel.databaseName;
    password = lawsBrowserDbModel.password;
    dbVersion = lawsBrowserDbModel.dbVersion;
    databaseTables = [
      TableCategory.getInstance,
      TableCategoriesRelation.getInstance,
      TableArticle.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = lawsBrowserDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Category
class Category {
  Category({this.id, this.name, this.parent, this.articles}) {
    _setDefaultValues();
  }
  Category.withFields(this.name, this.parent, this.articles) {
    _setDefaultValues();
  }
  Category.withId(this.id, this.name, this.parent, this.articles) {
    _setDefaultValues();
  }
  Category.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'] as String;
    }
    if (o['parent'] != null) {
      parent = o['parent'] as String;
    }
    articles = int.tryParse(o['articles'].toString());

    // RELATIONSHIPS FromMAP
    plArticle = o['article'] != null
        ? Article.fromMap(o['article'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Category)
  int id;
  String name;
  String parent;
  int articles;

  BoolResult saveResult;
  // end FIELDS (Category)

// RELATIONSHIPS (Category)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plArticle', 'plField2'..]) or so on..
  Article plArticle;

  /// get Article By Articles
  Future<Article> getArticle(
      {bool loadParents = false, List<String> loadedFields}) async {
    final _obj = await Article().getById(articles,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Category)

// COLLECTIONS & VIRTUALS (Category)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plCategoriesRelations', 'plField2'..]) or so on..
  List<CategoriesRelation> plCategoriesRelations;

  /// get CategoriesRelation(s) filtered by id=category
  CategoriesRelationFilterBuilder getCategoriesRelations(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return CategoriesRelation()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .category
        .equals(id)
        .and;
  }

  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plCategoriesRelationsByparent', 'plField2'..]) or so on..
  List<CategoriesRelation> plCategoriesRelationsByparent;

  /// get CategoriesRelation(s) filtered by id=parent
  CategoriesRelationFilterBuilder getCategoriesRelationsByparent(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return CategoriesRelation()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .parent
        .equals(id)
        .and;
  }

  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plCategoriesRelationsBychildren', 'plField2'..]) or so on..
  List<CategoriesRelation> plCategoriesRelationsBychildren;

  /// get CategoriesRelation(s) filtered by id=children
  CategoriesRelationFilterBuilder getCategoriesRelationsBychildren(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return CategoriesRelation()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .children
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Category)

  static const bool _softDeleteActivated = false;
  CategoryManager __mnCategory;

  CategoryManager get _mnCategory {
    return __mnCategory = __mnCategory ?? CategoryManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (parent != null) {
      map['parent'] = parent;
    }

    if (articles != null) {
      map['articles'] = forView ? plArticle.articleName : articles;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (parent != null) {
      map['parent'] = parent;
    }

    if (articles != null) {
      map['articles'] = forView ? plArticle.articleName : articles;
    }

// COLLECTIONS (Category)
    if (!forQuery) {
      map['CategoriesRelations'] = await getCategoriesRelations().toMapList();
    }
    if (!forQuery) {
      map['CategoriesRelations'] = await getCategoriesRelations().toMapList();
    }
    if (!forQuery) {
      map['CategoriesRelations'] = await getCategoriesRelations().toMapList();
    }
// END COLLECTIONS (Category)

    return map;
  }

  /// This method returns Json String [Category]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Category]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [name, parent, articles];
  }

  List<dynamic> toArgsWithIds() {
    return [id, name, parent, articles];
  }

  static Future<List<Category>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Category.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<Category>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Category>[];
    try {
      objList = list
          .map((category) => Category.fromMap(category as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Category.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Category>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Category> objList = <Category>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Category.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('categories.plCategoriesRelations') && */ (preloadFields ==
                null ||
            preloadFields.contains('plCategoriesRelations'))) {
          /*_loadedFields.add('categories.plCategoriesRelations'); */
          obj.plCategoriesRelations = obj.plCategoriesRelations ??
              await obj.getCategoriesRelations().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedFields.contains('categories.plCategoriesRelationsByparent') && */ (preloadFields ==
                null ||
            preloadFields.contains('plCategoriesRelationsByparent'))) {
          /*_loadedFields.add('categories.plCategoriesRelationsByparent'); */
          obj.plCategoriesRelationsByparent =
              obj.plCategoriesRelationsByparent ??
                  await obj.getCategoriesRelationsByparent().toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedFields.contains('categories.plCategoriesRelationsBychildren') && */ (preloadFields ==
                null ||
            preloadFields.contains('plCategoriesRelationsBychildren'))) {
          /*_loadedFields.add('categories.plCategoriesRelationsBychildren'); */
          obj.plCategoriesRelationsBychildren =
              obj.plCategoriesRelationsBychildren ??
                  await obj.getCategoriesRelationsBychildren().toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('articles.plArticle') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plArticle'))) {
          /*_loadedFields.add('articles.plArticle');*/
          obj.plArticle = obj.plArticle ??
              await obj.getArticle(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Category by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Category if exist, otherwise returns null
  Future<Category> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    Category obj;
    final data = await _mnCategory.getById([id]);
    if (data.length != 0) {
      obj = Category.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('categories.plCategoriesRelations') && */ (preloadFields ==
                null ||
            preloadFields.contains('plCategoriesRelations'))) {
          /*_loadedFields.add('categories.plCategoriesRelations'); */
          obj.plCategoriesRelations = obj.plCategoriesRelations ??
              await obj.getCategoriesRelations().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedFields.contains('categories.plCategoriesRelationsByparent') && */ (preloadFields ==
                null ||
            preloadFields.contains('plCategoriesRelationsByparent'))) {
          /*_loadedFields.add('categories.plCategoriesRelationsByparent'); */
          obj.plCategoriesRelationsByparent =
              obj.plCategoriesRelationsByparent ??
                  await obj.getCategoriesRelationsByparent().toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedFields.contains('categories.plCategoriesRelationsBychildren') && */ (preloadFields ==
                null ||
            preloadFields.contains('plCategoriesRelationsBychildren'))) {
          /*_loadedFields.add('categories.plCategoriesRelationsBychildren'); */
          obj.plCategoriesRelationsBychildren =
              obj.plCategoriesRelationsBychildren ??
                  await obj.getCategoriesRelationsBychildren().toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('articles.plArticle') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plArticle'))) {
          /*_loadedFields.add('articles.plArticle');*/
          obj.plArticle = obj.plArticle ??
              await obj.getArticle(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Category) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnCategory.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnCategory.update(this);
    }

    return id;
  }

  /// saveAs Category. Returns a new Primary Key value of Category

  /// <returns>Returns a new Primary Key value of Category
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Category> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Category> categories) async {
    // final results = _mnCategory.saveAll('INSERT OR REPLACE INTO categories (id,name, parent, articles)  VALUES (?,?,?,?)',categories);
    // return results; removed in sqfentity_gen 1.3.0+6
    await LawsBrowserDB().batchStart();
    for (final obj in categories) {
      await obj.save();
    }
    //    return LawsBrowserDB().batchCommit();
    final result = await LawsBrowserDB().batchCommit();
    for (int i = 0; i < categories.length; i++) {
      if (categories[i].id == null) {
        categories[i].id = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnCategory.rawInsert(
              'INSERT OR REPLACE INTO categories (id,name, parent, articles)  VALUES (?,?,?,?)',
              [id, name, parent, articles]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Category id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Category id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Category Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Category>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Category> categories) async {
    final results = await _mnCategory.rawInsertAll(
        'INSERT OR REPLACE INTO categories (id,name, parent, articles)  VALUES (?,?,?,?)',
        categories);
    return results;
  }

  /// Deletes Category

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Category invoked (id=$id)');
    var result = BoolResult();
    if (await CategoriesRelation().select().category.equals(id).and.toCount() >
        0) {
      return BoolResult(
          success: false,
          errorMessage:
              'SQFENTITY ERROR: The DELETE statement conflicted with the REFERENCE RELATIONSHIP (CategoriesRelation.category)');
    }
    {
      result = await CategoriesRelation()
          .select()
          .parent
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (await CategoriesRelation().select().children.equals(id).and.toCount() >
        0) {
      return BoolResult(
          success: false,
          errorMessage:
              'SQFENTITY ERROR: The DELETE statement conflicted with the REFERENCE RELATIONSHIP (CategoriesRelation.children)');
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnCategory
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnCategory.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  CategoryFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return CategoryFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  CategoryFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return CategoryFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion category

// region CategoryField
class CategoryField extends SearchCriteria {
  CategoryField(this.categoryFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  CategoryFilterBuilder categoryFB;

  CategoryField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  CategoryFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    categoryFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoryFB.parameters, param, SqlSyntax.EQuals,
            categoryFB._addedBlocks)
        : setCriteria(pValue, categoryFB.parameters, param, SqlSyntax.NotEQuals,
            categoryFB._addedBlocks);
    _waitingNot = '';
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    categoryFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.EQualsOrNull, categoryFB._addedBlocks)
        : setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, categoryFB._addedBlocks);
    _waitingNot = '';
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder isNull() {
    categoryFB._addedBlocks = setCriteria(
        0,
        categoryFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        categoryFB._addedBlocks);
    _waitingNot = '';
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      categoryFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          categoryFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          categoryFB._addedBlocks);
      _waitingNot = '';
      categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
          categoryFB._addedBlocks.retVal;
    }
    return categoryFB;
  }

  CategoryFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      categoryFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          categoryFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          categoryFB._addedBlocks);
      _waitingNot = '';
      categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
          categoryFB._addedBlocks.retVal;
      categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
          categoryFB._addedBlocks.retVal;
    }
    return categoryFB;
  }

  CategoryFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      categoryFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          categoryFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          categoryFB._addedBlocks);
      _waitingNot = '';
      categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
          categoryFB._addedBlocks.retVal;
    }
    return categoryFB;
  }

  CategoryFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      categoryFB._addedBlocks = setCriteria(
          pFirst,
          categoryFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          categoryFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        categoryFB._addedBlocks = setCriteria(pFirst, categoryFB.parameters,
            param, SqlSyntax.LessThan, categoryFB._addedBlocks);
      } else {
        categoryFB._addedBlocks = setCriteria(pFirst, categoryFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, categoryFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        categoryFB._addedBlocks = setCriteria(pLast, categoryFB.parameters,
            param, SqlSyntax.GreaterThan, categoryFB._addedBlocks);
      } else {
        categoryFB._addedBlocks = setCriteria(pLast, categoryFB.parameters,
            param, SqlSyntax.LessThanOrEquals, categoryFB._addedBlocks);
      }
    }
    _waitingNot = '';
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    categoryFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.GreaterThan, categoryFB._addedBlocks)
        : setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.LessThanOrEquals, categoryFB._addedBlocks);
    _waitingNot = '';
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    categoryFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoryFB.parameters, param, SqlSyntax.LessThan,
            categoryFB._addedBlocks)
        : setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, categoryFB._addedBlocks);
    _waitingNot = '';
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    categoryFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, categoryFB._addedBlocks)
        : setCriteria(pValue, categoryFB.parameters, param, SqlSyntax.LessThan,
            categoryFB._addedBlocks);
    _waitingNot = '';
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    categoryFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.LessThanOrEquals, categoryFB._addedBlocks)
        : setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.GreaterThan, categoryFB._addedBlocks);
    _waitingNot = '';
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder inValues(dynamic pValue) {
    categoryFB._addedBlocks = setCriteria(
        pValue,
        categoryFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        categoryFB._addedBlocks);
    _waitingNot = '';
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }
}
// endregion CategoryField

// region CategoryFilterBuilder
class CategoryFilterBuilder extends SearchCriteria {
  CategoryFilterBuilder(Category obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Category _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  CategoryFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  CategoryFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  CategoryFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  CategoryFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  CategoryFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  CategoryFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  CategoryFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  CategoryFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  CategoryFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  CategoryFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  CategoryFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  CategoryField setField(CategoryField field, String colName, DbType dbtype) {
    return CategoryField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  CategoryField _id;
  CategoryField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  CategoryField _name;
  CategoryField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  CategoryField _parent;
  CategoryField get parent {
    return _parent = setField(_parent, 'parent', DbType.text);
  }

  CategoryField _articles;
  CategoryField get articles {
    return _articles = setField(_articles, 'articles', DbType.integer);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Category._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Category> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    // Check sub records where in (CategoriesRelation) according to DeleteRule.NO_ACTION

    final idListCategoriesRelationBYcategory = toListPrimaryKeySQL(false);
    final resCategoriesRelationBYcategory = await CategoriesRelation()
        .select()
        .where('category IN (${idListCategoriesRelationBYcategory['sql']})',
            parameterValue: idListCategoriesRelationBYcategory['args'])
        .toCount();
    if (resCategoriesRelationBYcategory > 0) {
      return BoolResult(
          success: false,
          errorMessage:
              'SQFENTITY ERROR: The DELETE statement conflicted with the REFERENCE RELATIONSHIP (CategoriesRelation.category)');
    }
// Delete sub records where in (CategoriesRelation) according to DeleteRule.CASCADE
    final idListCategoriesRelationBYparent = toListPrimaryKeySQL(false);
    final resCategoriesRelationBYparent = await CategoriesRelation()
        .select()
        .where('parent IN (${idListCategoriesRelationBYparent['sql']})',
            parameterValue: idListCategoriesRelationBYparent['args'])
        .delete(hardDelete);
    if (!resCategoriesRelationBYparent.success) {
      return resCategoriesRelationBYparent;
    }
// Check sub records where in (CategoriesRelation) according to DeleteRule.NO_ACTION

    final idListCategoriesRelationBYchildren = toListPrimaryKeySQL(false);
    final resCategoriesRelationBYchildren = await CategoriesRelation()
        .select()
        .where('children IN (${idListCategoriesRelationBYchildren['sql']})',
            parameterValue: idListCategoriesRelationBYchildren['args'])
        .toCount();
    if (resCategoriesRelationBYchildren > 0) {
      return BoolResult(
          success: false,
          errorMessage:
              'SQFENTITY ERROR: The DELETE statement conflicted with the REFERENCE RELATIONSHIP (CategoriesRelation.children)');
    }

    if (Category._softDeleteActivated && !hardDelete) {
      r = await _obj._mnCategory.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnCategory.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from categories ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnCategory.updateBatch(qparams, values);
  }

  /// This method always returns Category Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Category>
  Future<Category> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnCategory.toList(qparams);
    final data = await objFuture;
    Category obj;
    if (data.isNotEmpty) {
      obj = Category.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('categories.plCategoriesRelations') && */ (preloadFields ==
                null ||
            preloadFields.contains('plCategoriesRelations'))) {
          /*_loadedFields.add('categories.plCategoriesRelations'); */
          obj.plCategoriesRelations = obj.plCategoriesRelations ??
              await obj.getCategoriesRelations().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedFields.contains('categories.plCategoriesRelationsByparent') && */ (preloadFields ==
                null ||
            preloadFields.contains('plCategoriesRelationsByparent'))) {
          /*_loadedFields.add('categories.plCategoriesRelationsByparent'); */
          obj.plCategoriesRelationsByparent =
              obj.plCategoriesRelationsByparent ??
                  await obj.getCategoriesRelationsByparent().toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedFields.contains('categories.plCategoriesRelationsBychildren') && */ (preloadFields ==
                null ||
            preloadFields.contains('plCategoriesRelationsBychildren'))) {
          /*_loadedFields.add('categories.plCategoriesRelationsBychildren'); */
          obj.plCategoriesRelationsBychildren =
              obj.plCategoriesRelationsBychildren ??
                  await obj.getCategoriesRelationsBychildren().toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('articles.plArticle') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plArticle'))) {
          /*_loadedFields.add('articles.plArticle');*/
          obj.plArticle = obj.plArticle ??
              await obj.getArticle(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Category]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) categoryCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final categoriesFuture = await _obj._mnCategory.toList(qparams);
    final int count = categoriesFuture[0]['CNT'] as int;
    if (categoryCount != null) {
      categoryCount(count);
    }
    return count;
  }

  /// This method returns List<Category> [Category]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Category>
  Future<List<Category>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Category> categoriesData = await Category.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return categoriesData;
  }

  /// This method returns Json String [Category]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Category]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Category]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnCategory.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Category]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM categories WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnCategory.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Category]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnCategory.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Category.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnCategory.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion CategoryFilterBuilder

// region CategoryFields
class CategoryFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fParent;
  static TableField get parent {
    return _fParent =
        _fParent ?? SqlSyntax.setField(_fParent, 'parent', DbType.text);
  }

  static TableField _fArticles;
  static TableField get articles {
    return _fArticles = _fArticles ??
        SqlSyntax.setField(_fArticles, 'articles', DbType.integer);
  }
}
// endregion CategoryFields

//region CategoryManager
class CategoryManager extends SqfEntityProvider {
  CategoryManager()
      : super(LawsBrowserDB(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'categories';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion CategoryManager
// region CategoriesRelation
class CategoriesRelation {
  CategoriesRelation({this.id, this.category, this.parent, this.children}) {
    _setDefaultValues();
  }
  CategoriesRelation.withFields(this.id, this.parent, this.children) {
    _setDefaultValues();
  }
  CategoriesRelation.withId(
      this.id, this.category, this.parent, this.children) {
    _setDefaultValues();
  }
  CategoriesRelation.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    category = int.tryParse(o['category'].toString());

    parent = int.tryParse(o['parent'].toString());

    children = int.tryParse(o['children'].toString());

    // RELATIONSHIPS FromMAP
    plCategory = o['plCategory'] != null
        ? Category.fromMap(o['plCategory'] as Map<String, dynamic>)
        : null;
    plCategoryByParent = o['category'] != null
        ? Category.fromMap(o['category'] as Map<String, dynamic>)
        : null;
    plCategoryByChildren = o['category'] != null
        ? Category.fromMap(o['category'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP

    isSaved = true;
  }
  // FIELDS (CategoriesRelation)
  int id;
  int category;
  int parent;
  int children;
  bool isSaved;
  BoolResult saveResult;
  // end FIELDS (CategoriesRelation)

// RELATIONSHIPS (CategoriesRelation)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plCategory', 'plField2'..]) or so on..
  Category plCategory;

  /// get Category By Category
  Future<Category> getCategory(
      {bool loadParents = false, List<String> loadedFields}) async {
    final _obj = await Category().getById(category,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }

  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plCategoryByParent', 'plField2'..]) or so on..
  Category plCategoryByParent;

  /// get Category By Parent
  Future<Category> getCategoryByParent(
      {bool loadParents = false, List<String> loadedFields}) async {
    final _obj = await Category()
        .getById(parent, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }

  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plCategoryByChildren', 'plField2'..]) or so on..
  Category plCategoryByChildren;

  /// get Category By Children
  Future<Category> getCategoryByChildren(
      {bool loadParents = false, List<String> loadedFields}) async {
    final _obj = await Category().getById(children,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (CategoriesRelation)

  static const bool _softDeleteActivated = false;
  CategoriesRelationManager __mnCategoriesRelation;

  CategoriesRelationManager get _mnCategoriesRelation {
    return __mnCategoriesRelation =
        __mnCategoriesRelation ?? CategoriesRelationManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (category != null) {
      map['category'] = forView ? plCategory.name : category;
    }

    if (parent != null) {
      map['parent'] = forView ? plCategory.name : parent;
    }

    if (children != null) {
      map['children'] = forView ? plCategory.name : children;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (category != null) {
      map['category'] = forView ? plCategory.name : category;
    }

    if (parent != null) {
      map['parent'] = forView ? plCategory.name : parent;
    }

    if (children != null) {
      map['children'] = forView ? plCategory.name : children;
    }

    return map;
  }

  /// This method returns Json String [CategoriesRelation]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [CategoriesRelation]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [id, parent, children];
  }

  List<dynamic> toArgsWithIds() {
    return [id, category, parent, children];
  }

  static Future<List<CategoriesRelation>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR CategoriesRelation.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<CategoriesRelation>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <CategoriesRelation>[];
    try {
      objList = list
          .map((categoriesrelation) => CategoriesRelation.fromMap(
              categoriesrelation as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR CategoriesRelation.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<CategoriesRelation>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<CategoriesRelation> objList = <CategoriesRelation>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = CategoriesRelation.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('categories.plCategory') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plCategory'))) {
          /*_loadedFields.add('categories.plCategory');*/
          obj.plCategory = obj.plCategory ??
              await obj.getCategory(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedFields.contains('categories.plCategoryByParent') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plCategoryByParent'))) {
          /*_loadedFields.add('categories.plCategoryByParent');*/
          obj.plCategoryByParent = obj.plCategoryByParent ??
              await obj.getCategoryByParent(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedFields.contains('categories.plCategoryByChildren') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plCategoryByChildren'))) {
          /*_loadedFields.add('categories.plCategoryByChildren');*/
          obj.plCategoryByChildren = obj.plCategoryByChildren ??
              await obj.getCategoryByChildren(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns CategoriesRelation by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id, int category
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns CategoriesRelation if exist, otherwise returns null
  Future<CategoriesRelation> getById(int id, int category,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    CategoriesRelation obj;
    final data = await _mnCategoriesRelation.getById([id, category]);
    if (data.length != 0) {
      obj = CategoriesRelation.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('categories.plCategory') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plCategory'))) {
          /*_loadedFields.add('categories.plCategory');*/
          obj.plCategory = obj.plCategory ??
              await obj.getCategory(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedFields.contains('categories.plCategoryByParent') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plCategoryByParent'))) {
          /*_loadedFields.add('categories.plCategoryByParent');*/
          obj.plCategoryByParent = obj.plCategoryByParent ??
              await obj.getCategoryByParent(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedFields.contains('categories.plCategoryByChildren') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plCategoryByChildren'))) {
          /*_loadedFields.add('categories.plCategoryByChildren');*/
          obj.plCategoryByChildren = obj.plCategoryByChildren ??
              await obj.getCategoryByChildren(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (CategoriesRelation) object. If the Primary Key (id) field is null, returns Error.
  ///
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  ///
  /// Call the saveAs() method if you do not want to save it when there is another row with the same id

  /// <returns>Returns BoolResult
  Future<BoolResult> save() async {
    final result = BoolResult(success: false);
    try {
      await _mnCategoriesRelation.rawInsert(
          'INSERT ${isSaved ? 'OR REPLACE' : ''} INTO categoriesRelations (id,category, parent, children)  VALUES (?,?,?,?)',
          toArgsWithIds());
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<CategoriesRelation> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<CategoriesRelation> categoriesrelations) async {
    // final results = _mnCategoriesRelation.saveAll('INSERT OR REPLACE INTO categoriesRelations (id,category, parent, children)  VALUES (?,?,?,?)',categoriesrelations);
    // return results; removed in sqfentity_gen 1.3.0+6
    await LawsBrowserDB().batchStart();
    for (final obj in categoriesrelations) {
      await obj.save();
    }
    //    return LawsBrowserDB().batchCommit();
    final result = await LawsBrowserDB().batchCommit();

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnCategoriesRelation.rawInsert(
              'INSERT OR REPLACE INTO categoriesRelations (id,category, parent, children)  VALUES (?,?,?,?)',
              [id, category, parent, children]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'CategoriesRelation id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'CategoriesRelation id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage:
              'CategoriesRelation Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<CategoriesRelation>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(
      List<CategoriesRelation> categoriesrelations) async {
    final results = await _mnCategoriesRelation.rawInsertAll(
        'INSERT OR REPLACE INTO categoriesRelations (id,category, parent, children)  VALUES (?,?,?,?)',
        categoriesrelations);
    return results;
  }

  /// Deletes CategoriesRelation

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete CategoriesRelation invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnCategoriesRelation.delete(QueryParams(
          whereString: 'id=? AND category=?', whereArguments: [id, category]));
    } else {
      return _mnCategoriesRelation.updateBatch(
          QueryParams(
              whereString: 'id=? AND category=?',
              whereArguments: [id, category]),
          {'isDeleted': 1});
    }
  }

  CategoriesRelationFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return CategoriesRelationFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  CategoriesRelationFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return CategoriesRelationFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion categoriesrelation

// region CategoriesRelationField
class CategoriesRelationField extends SearchCriteria {
  CategoriesRelationField(this.categoriesrelationFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  CategoriesRelationFilterBuilder categoriesrelationFB;

  CategoriesRelationField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  CategoriesRelationFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    categoriesrelationFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoriesrelationFB.parameters, param,
            SqlSyntax.EQuals, categoriesrelationFB._addedBlocks)
        : setCriteria(pValue, categoriesrelationFB.parameters, param,
            SqlSyntax.NotEQuals, categoriesrelationFB._addedBlocks);
    _waitingNot = '';
    categoriesrelationFB
            ._addedBlocks.needEndBlock[categoriesrelationFB._blockIndex] =
        categoriesrelationFB._addedBlocks.retVal;
    return categoriesrelationFB;
  }

  CategoriesRelationFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    categoriesrelationFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoriesrelationFB.parameters, param,
            SqlSyntax.EQualsOrNull, categoriesrelationFB._addedBlocks)
        : setCriteria(pValue, categoriesrelationFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, categoriesrelationFB._addedBlocks);
    _waitingNot = '';
    categoriesrelationFB
            ._addedBlocks.needEndBlock[categoriesrelationFB._blockIndex] =
        categoriesrelationFB._addedBlocks.retVal;
    return categoriesrelationFB;
  }

  CategoriesRelationFilterBuilder isNull() {
    categoriesrelationFB._addedBlocks = setCriteria(
        0,
        categoriesrelationFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        categoriesrelationFB._addedBlocks);
    _waitingNot = '';
    categoriesrelationFB
            ._addedBlocks.needEndBlock[categoriesrelationFB._blockIndex] =
        categoriesrelationFB._addedBlocks.retVal;
    return categoriesrelationFB;
  }

  CategoriesRelationFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      categoriesrelationFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          categoriesrelationFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          categoriesrelationFB._addedBlocks);
      _waitingNot = '';
      categoriesrelationFB
              ._addedBlocks.needEndBlock[categoriesrelationFB._blockIndex] =
          categoriesrelationFB._addedBlocks.retVal;
    }
    return categoriesrelationFB;
  }

  CategoriesRelationFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      categoriesrelationFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          categoriesrelationFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          categoriesrelationFB._addedBlocks);
      _waitingNot = '';
      categoriesrelationFB
              ._addedBlocks.needEndBlock[categoriesrelationFB._blockIndex] =
          categoriesrelationFB._addedBlocks.retVal;
      categoriesrelationFB
              ._addedBlocks.needEndBlock[categoriesrelationFB._blockIndex] =
          categoriesrelationFB._addedBlocks.retVal;
    }
    return categoriesrelationFB;
  }

  CategoriesRelationFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      categoriesrelationFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          categoriesrelationFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          categoriesrelationFB._addedBlocks);
      _waitingNot = '';
      categoriesrelationFB
              ._addedBlocks.needEndBlock[categoriesrelationFB._blockIndex] =
          categoriesrelationFB._addedBlocks.retVal;
    }
    return categoriesrelationFB;
  }

  CategoriesRelationFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      categoriesrelationFB._addedBlocks = setCriteria(
          pFirst,
          categoriesrelationFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          categoriesrelationFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        categoriesrelationFB._addedBlocks = setCriteria(
            pFirst,
            categoriesrelationFB.parameters,
            param,
            SqlSyntax.LessThan,
            categoriesrelationFB._addedBlocks);
      } else {
        categoriesrelationFB._addedBlocks = setCriteria(
            pFirst,
            categoriesrelationFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            categoriesrelationFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        categoriesrelationFB._addedBlocks = setCriteria(
            pLast,
            categoriesrelationFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            categoriesrelationFB._addedBlocks);
      } else {
        categoriesrelationFB._addedBlocks = setCriteria(
            pLast,
            categoriesrelationFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            categoriesrelationFB._addedBlocks);
      }
    }
    _waitingNot = '';
    categoriesrelationFB
            ._addedBlocks.needEndBlock[categoriesrelationFB._blockIndex] =
        categoriesrelationFB._addedBlocks.retVal;
    return categoriesrelationFB;
  }

  CategoriesRelationFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    categoriesrelationFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoriesrelationFB.parameters, param,
            SqlSyntax.GreaterThan, categoriesrelationFB._addedBlocks)
        : setCriteria(pValue, categoriesrelationFB.parameters, param,
            SqlSyntax.LessThanOrEquals, categoriesrelationFB._addedBlocks);
    _waitingNot = '';
    categoriesrelationFB
            ._addedBlocks.needEndBlock[categoriesrelationFB._blockIndex] =
        categoriesrelationFB._addedBlocks.retVal;
    return categoriesrelationFB;
  }

  CategoriesRelationFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    categoriesrelationFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoriesrelationFB.parameters, param,
            SqlSyntax.LessThan, categoriesrelationFB._addedBlocks)
        : setCriteria(pValue, categoriesrelationFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, categoriesrelationFB._addedBlocks);
    _waitingNot = '';
    categoriesrelationFB
            ._addedBlocks.needEndBlock[categoriesrelationFB._blockIndex] =
        categoriesrelationFB._addedBlocks.retVal;
    return categoriesrelationFB;
  }

  CategoriesRelationFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    categoriesrelationFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoriesrelationFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, categoriesrelationFB._addedBlocks)
        : setCriteria(pValue, categoriesrelationFB.parameters, param,
            SqlSyntax.LessThan, categoriesrelationFB._addedBlocks);
    _waitingNot = '';
    categoriesrelationFB
            ._addedBlocks.needEndBlock[categoriesrelationFB._blockIndex] =
        categoriesrelationFB._addedBlocks.retVal;
    return categoriesrelationFB;
  }

  CategoriesRelationFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    categoriesrelationFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoriesrelationFB.parameters, param,
            SqlSyntax.LessThanOrEquals, categoriesrelationFB._addedBlocks)
        : setCriteria(pValue, categoriesrelationFB.parameters, param,
            SqlSyntax.GreaterThan, categoriesrelationFB._addedBlocks);
    _waitingNot = '';
    categoriesrelationFB
            ._addedBlocks.needEndBlock[categoriesrelationFB._blockIndex] =
        categoriesrelationFB._addedBlocks.retVal;
    return categoriesrelationFB;
  }

  CategoriesRelationFilterBuilder inValues(dynamic pValue) {
    categoriesrelationFB._addedBlocks = setCriteria(
        pValue,
        categoriesrelationFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        categoriesrelationFB._addedBlocks);
    _waitingNot = '';
    categoriesrelationFB
            ._addedBlocks.needEndBlock[categoriesrelationFB._blockIndex] =
        categoriesrelationFB._addedBlocks.retVal;
    return categoriesrelationFB;
  }
}
// endregion CategoriesRelationField

// region CategoriesRelationFilterBuilder
class CategoriesRelationFilterBuilder extends SearchCriteria {
  CategoriesRelationFilterBuilder(CategoriesRelation obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  CategoriesRelation _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  CategoriesRelationFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  CategoriesRelationFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  CategoriesRelationFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  CategoriesRelationFilterBuilder where(String whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  CategoriesRelationFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  CategoriesRelationFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  CategoriesRelationFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  CategoriesRelationFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  CategoriesRelationFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  CategoriesRelationFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  CategoriesRelationFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  CategoriesRelationField setField(
      CategoriesRelationField field, String colName, DbType dbtype) {
    return CategoriesRelationField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  CategoriesRelationField _id;
  CategoriesRelationField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  CategoriesRelationField _category;
  CategoriesRelationField get category {
    return _category = setField(_category, 'category', DbType.integer);
  }

  CategoriesRelationField _parent;
  CategoriesRelationField get parent {
    return _parent = setField(_parent, 'parent', DbType.integer);
  }

  CategoriesRelationField _children;
  CategoriesRelationField get children {
    return _children = setField(_children, 'children', DbType.integer);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (CategoriesRelation._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<CategoriesRelation> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (CategoriesRelation._softDeleteActivated && !hardDelete) {
      r = await _obj._mnCategoriesRelation
          .updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnCategoriesRelation.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from categoriesRelations ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnCategoriesRelation.updateBatch(qparams, values);
  }

  /// This method always returns CategoriesRelation Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<CategoriesRelation>
  Future<CategoriesRelation> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnCategoriesRelation.toList(qparams);
    final data = await objFuture;
    CategoriesRelation obj;
    if (data.isNotEmpty) {
      obj = CategoriesRelation.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('categories.plCategory') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plCategory'))) {
          /*_loadedFields.add('categories.plCategory');*/
          obj.plCategory = obj.plCategory ??
              await obj.getCategory(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedFields.contains('categories.plCategoryByParent') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plCategoryByParent'))) {
          /*_loadedFields.add('categories.plCategoryByParent');*/
          obj.plCategoryByParent = obj.plCategoryByParent ??
              await obj.getCategoryByParent(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedFields.contains('categories.plCategoryByChildren') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plCategoryByChildren'))) {
          /*_loadedFields.add('categories.plCategoryByChildren');*/
          obj.plCategoryByChildren = obj.plCategoryByChildren ??
              await obj.getCategoryByChildren(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [CategoriesRelation]
  ///
  /// <returns>int
  Future<int> toCount(
      [VoidCallback Function(int c) categoriesrelationCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final categoriesrelationsFuture =
        await _obj._mnCategoriesRelation.toList(qparams);
    final int count = categoriesrelationsFuture[0]['CNT'] as int;
    if (categoriesrelationCount != null) {
      categoriesrelationCount(count);
    }
    return count;
  }

  /// This method returns List<CategoriesRelation> [CategoriesRelation]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<CategoriesRelation>
  Future<List<CategoriesRelation>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<CategoriesRelation> categoriesrelationsData =
        await CategoriesRelation.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return categoriesrelationsData;
  }

  /// This method returns Json String [CategoriesRelation]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [CategoriesRelation]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [CategoriesRelation]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnCategoriesRelation.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [CategoriesRelation]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id`category` FROM categoriesRelations WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<id,category> [CategoriesRelation]
  /// <returns>List<id,category>
  Future<List<CategoriesRelation>> toListPrimaryKey(
      [bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    qparams.selectColumns = ['id', 'category'];
    final categoriesrelationFuture =
        await _obj._mnCategoriesRelation.toList(qparams);
    return await CategoriesRelation.fromMapList(categoriesrelationFuture);
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [CategoriesRelation]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnCategoriesRelation.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await CategoriesRelation.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnCategoriesRelation.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion CategoriesRelationFilterBuilder

// region CategoriesRelationFields
class CategoriesRelationFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fCategory;
  static TableField get category {
    return _fCategory = _fCategory ??
        SqlSyntax.setField(_fCategory, 'category', DbType.integer);
  }

  static TableField _fParent;
  static TableField get parent {
    return _fParent =
        _fParent ?? SqlSyntax.setField(_fParent, 'parent', DbType.integer);
  }

  static TableField _fChildren;
  static TableField get children {
    return _fChildren = _fChildren ??
        SqlSyntax.setField(_fChildren, 'children', DbType.integer);
  }
}
// endregion CategoriesRelationFields

//region CategoriesRelationManager
class CategoriesRelationManager extends SqfEntityProvider {
  CategoriesRelationManager()
      : super(LawsBrowserDB(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'categoriesRelations';
  static final List<String> _primaryKeyList = ['id', 'category'];
  static final String _whereStr = 'id=? AND category=?';
}

//endregion CategoriesRelationManager
// region Article
class Article {
  Article({this.id, this.articleName, this.articleText}) {
    _setDefaultValues();
  }
  Article.withFields(this.articleName, this.articleText) {
    _setDefaultValues();
  }
  Article.withId(this.id, this.articleName, this.articleText) {
    _setDefaultValues();
  }
  Article.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['articleName'] != null) {
      articleName = o['articleName'] as String;
    }
    if (o['articleText'] != null) {
      articleText = o['articleText'] as String;
    }
  }
  // FIELDS (Article)
  int id;
  String articleName;
  String articleText;

  BoolResult saveResult;
  // end FIELDS (Article)

// COLLECTIONS & VIRTUALS (Article)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plCategories', 'plField2'..]) or so on..
  List<Category> plCategories;

  /// get Category(s) filtered by id=articles
  CategoryFilterBuilder getCategories(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Category()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .articles
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Article)

  static const bool _softDeleteActivated = false;
  ArticleManager __mnArticle;

  ArticleManager get _mnArticle {
    return __mnArticle = __mnArticle ?? ArticleManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (articleName != null) {
      map['articleName'] = articleName;
    }

    if (articleText != null) {
      map['articleText'] = articleText;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (articleName != null) {
      map['articleName'] = articleName;
    }

    if (articleText != null) {
      map['articleText'] = articleText;
    }

// COLLECTIONS (Article)
    if (!forQuery) {
      map['Categories'] = await getCategories().toMapList();
    }
// END COLLECTIONS (Article)

    return map;
  }

  /// This method returns Json String [Article]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Article]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [articleName, articleText];
  }

  List<dynamic> toArgsWithIds() {
    return [id, articleName, articleText];
  }

  static Future<List<Article>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Article.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<Article>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Article>[];
    try {
      objList = list
          .map((article) => Article.fromMap(article as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Article.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Article>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Article> objList = <Article>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Article.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('articles.plCategories') && */ (preloadFields ==
                null ||
            preloadFields.contains('plCategories'))) {
          /*_loadedFields.add('articles.plCategories'); */
          obj.plCategories = obj.plCategories ??
              await obj.getCategories().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Article by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Article if exist, otherwise returns null
  Future<Article> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    Article obj;
    final data = await _mnArticle.getById([id]);
    if (data.length != 0) {
      obj = Article.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('articles.plCategories') && */ (preloadFields ==
                null ||
            preloadFields.contains('plCategories'))) {
          /*_loadedFields.add('articles.plCategories'); */
          obj.plCategories = obj.plCategories ??
              await obj.getCategories().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Article) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnArticle.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnArticle.update(this);
    }

    return id;
  }

  /// saveAs Article. Returns a new Primary Key value of Article

  /// <returns>Returns a new Primary Key value of Article
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Article> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Article> articles) async {
    // final results = _mnArticle.saveAll('INSERT OR REPLACE INTO articles (id,articleName, articleText)  VALUES (?,?,?)',articles);
    // return results; removed in sqfentity_gen 1.3.0+6
    await LawsBrowserDB().batchStart();
    for (final obj in articles) {
      await obj.save();
    }
    //    return LawsBrowserDB().batchCommit();
    final result = await LawsBrowserDB().batchCommit();
    for (int i = 0; i < articles.length; i++) {
      if (articles[i].id == null) {
        articles[i].id = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnArticle.rawInsert(
              'INSERT OR REPLACE INTO articles (id,articleName, articleText)  VALUES (?,?,?)',
              [id, articleName, articleText]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Article id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Article id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Article Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Article>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Article> articles) async {
    final results = await _mnArticle.rawInsertAll(
        'INSERT OR REPLACE INTO articles (id,articleName, articleText)  VALUES (?,?,?)',
        articles);
    return results;
  }

  /// Deletes Article

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Article invoked (id=$id)');
    var result = BoolResult();
    {
      result =
          await Category().select().articles.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnArticle
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnArticle.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  ArticleFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return ArticleFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  ArticleFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return ArticleFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion article

// region ArticleField
class ArticleField extends SearchCriteria {
  ArticleField(this.articleFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  ArticleFilterBuilder articleFB;

  ArticleField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  ArticleFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    articleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, articleFB.parameters, param, SqlSyntax.EQuals,
            articleFB._addedBlocks)
        : setCriteria(pValue, articleFB.parameters, param, SqlSyntax.NotEQuals,
            articleFB._addedBlocks);
    _waitingNot = '';
    articleFB._addedBlocks.needEndBlock[articleFB._blockIndex] =
        articleFB._addedBlocks.retVal;
    return articleFB;
  }

  ArticleFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    articleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, articleFB.parameters, param,
            SqlSyntax.EQualsOrNull, articleFB._addedBlocks)
        : setCriteria(pValue, articleFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, articleFB._addedBlocks);
    _waitingNot = '';
    articleFB._addedBlocks.needEndBlock[articleFB._blockIndex] =
        articleFB._addedBlocks.retVal;
    return articleFB;
  }

  ArticleFilterBuilder isNull() {
    articleFB._addedBlocks = setCriteria(
        0,
        articleFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        articleFB._addedBlocks);
    _waitingNot = '';
    articleFB._addedBlocks.needEndBlock[articleFB._blockIndex] =
        articleFB._addedBlocks.retVal;
    return articleFB;
  }

  ArticleFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      articleFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          articleFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          articleFB._addedBlocks);
      _waitingNot = '';
      articleFB._addedBlocks.needEndBlock[articleFB._blockIndex] =
          articleFB._addedBlocks.retVal;
    }
    return articleFB;
  }

  ArticleFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      articleFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          articleFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          articleFB._addedBlocks);
      _waitingNot = '';
      articleFB._addedBlocks.needEndBlock[articleFB._blockIndex] =
          articleFB._addedBlocks.retVal;
      articleFB._addedBlocks.needEndBlock[articleFB._blockIndex] =
          articleFB._addedBlocks.retVal;
    }
    return articleFB;
  }

  ArticleFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      articleFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          articleFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          articleFB._addedBlocks);
      _waitingNot = '';
      articleFB._addedBlocks.needEndBlock[articleFB._blockIndex] =
          articleFB._addedBlocks.retVal;
    }
    return articleFB;
  }

  ArticleFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      articleFB._addedBlocks = setCriteria(
          pFirst,
          articleFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          articleFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        articleFB._addedBlocks = setCriteria(pFirst, articleFB.parameters,
            param, SqlSyntax.LessThan, articleFB._addedBlocks);
      } else {
        articleFB._addedBlocks = setCriteria(pFirst, articleFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, articleFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        articleFB._addedBlocks = setCriteria(pLast, articleFB.parameters, param,
            SqlSyntax.GreaterThan, articleFB._addedBlocks);
      } else {
        articleFB._addedBlocks = setCriteria(pLast, articleFB.parameters, param,
            SqlSyntax.LessThanOrEquals, articleFB._addedBlocks);
      }
    }
    _waitingNot = '';
    articleFB._addedBlocks.needEndBlock[articleFB._blockIndex] =
        articleFB._addedBlocks.retVal;
    return articleFB;
  }

  ArticleFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    articleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, articleFB.parameters, param,
            SqlSyntax.GreaterThan, articleFB._addedBlocks)
        : setCriteria(pValue, articleFB.parameters, param,
            SqlSyntax.LessThanOrEquals, articleFB._addedBlocks);
    _waitingNot = '';
    articleFB._addedBlocks.needEndBlock[articleFB._blockIndex] =
        articleFB._addedBlocks.retVal;
    return articleFB;
  }

  ArticleFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    articleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, articleFB.parameters, param, SqlSyntax.LessThan,
            articleFB._addedBlocks)
        : setCriteria(pValue, articleFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, articleFB._addedBlocks);
    _waitingNot = '';
    articleFB._addedBlocks.needEndBlock[articleFB._blockIndex] =
        articleFB._addedBlocks.retVal;
    return articleFB;
  }

  ArticleFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    articleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, articleFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, articleFB._addedBlocks)
        : setCriteria(pValue, articleFB.parameters, param, SqlSyntax.LessThan,
            articleFB._addedBlocks);
    _waitingNot = '';
    articleFB._addedBlocks.needEndBlock[articleFB._blockIndex] =
        articleFB._addedBlocks.retVal;
    return articleFB;
  }

  ArticleFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    articleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, articleFB.parameters, param,
            SqlSyntax.LessThanOrEquals, articleFB._addedBlocks)
        : setCriteria(pValue, articleFB.parameters, param,
            SqlSyntax.GreaterThan, articleFB._addedBlocks);
    _waitingNot = '';
    articleFB._addedBlocks.needEndBlock[articleFB._blockIndex] =
        articleFB._addedBlocks.retVal;
    return articleFB;
  }

  ArticleFilterBuilder inValues(dynamic pValue) {
    articleFB._addedBlocks = setCriteria(
        pValue,
        articleFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        articleFB._addedBlocks);
    _waitingNot = '';
    articleFB._addedBlocks.needEndBlock[articleFB._blockIndex] =
        articleFB._addedBlocks.retVal;
    return articleFB;
  }
}
// endregion ArticleField

// region ArticleFilterBuilder
class ArticleFilterBuilder extends SearchCriteria {
  ArticleFilterBuilder(Article obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Article _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  ArticleFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  ArticleFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  ArticleFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  ArticleFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  ArticleFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  ArticleFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  ArticleFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ArticleFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ArticleFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ArticleFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ArticleFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  ArticleField setField(ArticleField field, String colName, DbType dbtype) {
    return ArticleField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  ArticleField _id;
  ArticleField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  ArticleField _articleName;
  ArticleField get articleName {
    return _articleName = setField(_articleName, 'articleName', DbType.text);
  }

  ArticleField _articleText;
  ArticleField get articleText {
    return _articleText = setField(_articleText, 'articleText', DbType.text);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Article._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Article> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    // Delete sub records where in (Category) according to DeleteRule.CASCADE
    final idListCategoryBYarticles = toListPrimaryKeySQL(false);
    final resCategoryBYarticles = await Category()
        .select()
        .where('articles IN (${idListCategoryBYarticles['sql']})',
            parameterValue: idListCategoryBYarticles['args'])
        .delete(hardDelete);
    if (!resCategoryBYarticles.success) {
      return resCategoryBYarticles;
    }

    if (Article._softDeleteActivated && !hardDelete) {
      r = await _obj._mnArticle.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnArticle.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from articles ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnArticle.updateBatch(qparams, values);
  }

  /// This method always returns Article Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Article>
  Future<Article> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnArticle.toList(qparams);
    final data = await objFuture;
    Article obj;
    if (data.isNotEmpty) {
      obj = Article.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('articles.plCategories') && */ (preloadFields ==
                null ||
            preloadFields.contains('plCategories'))) {
          /*_loadedFields.add('articles.plCategories'); */
          obj.plCategories = obj.plCategories ??
              await obj.getCategories().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Article]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) articleCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final articlesFuture = await _obj._mnArticle.toList(qparams);
    final int count = articlesFuture[0]['CNT'] as int;
    if (articleCount != null) {
      articleCount(count);
    }
    return count;
  }

  /// This method returns List<Article> [Article]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Article>
  Future<List<Article>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Article> articlesData = await Article.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return articlesData;
  }

  /// This method returns Json String [Article]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Article]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Article]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnArticle.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Article]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM articles WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnArticle.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Article]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnArticle.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Article.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnArticle.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ArticleFilterBuilder

// region ArticleFields
class ArticleFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fArticleName;
  static TableField get articleName {
    return _fArticleName = _fArticleName ??
        SqlSyntax.setField(_fArticleName, 'articleName', DbType.text);
  }

  static TableField _fArticleText;
  static TableField get articleText {
    return _fArticleText = _fArticleText ??
        SqlSyntax.setField(_fArticleText, 'articleText', DbType.text);
  }
}
// endregion ArticleFields

//region ArticleManager
class ArticleManager extends SqfEntityProvider {
  ArticleManager()
      : super(LawsBrowserDB(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'articles';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion ArticleManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o) nextval]) async {
    final val = await LawsBrowserDBSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o) currentval]) async {
    final val = await LawsBrowserDBSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o) currentval]) async {
    final val = await LawsBrowserDBSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class LawsBrowserDBSequenceManager extends SqfEntityProvider {
  LawsBrowserDBSequenceManager() : super(LawsBrowserDB());
}
// END OF ENTITIES
